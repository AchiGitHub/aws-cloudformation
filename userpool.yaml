AWSTemplateFormatVersion: 2010-09-09
Description: Cognito Stack
Parameters:
  AuthName:
    Type: String
    Description: test-cloudformation-userpool
  LambdaPostProduct:
    Type: String
    Default: Lambda-post-products
  LambdaGetProducts:
    Type: String
    Default: Lambda-get-products
  EnvironmentName:
    Type: String
    Default: Prod
Resources:
  #Create the NodeJS lambda function to create a POST request to DynamoDB
  LambdaPostFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          var dynamoDb = new AWS.DynamoDB.DocumentClient();
          exports.handler = (event, context, callback) => {
            const params = {
              TableName: "Dynamo-DB-Lambda-API",
              Item: {
                id: context.awsRequestId,
                productName: event.productName,
                createdAt: Date.now()
              }
            };
            dynamoDb.put(params, (error, data) => {
              if(error){
                const response = {
                  statusCode: 500,
                  body: error
                }
                callback(null, response);
                return;
              }
              const response = {
                statusCode: 200,
                data: data
              };
              callback(null, response)
            });
          }
      FunctionName:
        Ref: LambdaPostProduct
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt IAMRole.Arn
    DependsOn:
      - DynamoDBTable
  #Create the NodeJS lambda function to create a GET request to DynamoDB
  LambdaGetFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          var dynamoDb = new AWS.DynamoDB.DocumentClient();
          exports.handler = (event, context, callback) => {
            const params = {
              TableName: "Dynamo-DB-Lambda-API",
              Select: "ALL_ATTRIBUTES"
            };
            dynamoDb.scan(params, (error, data) => {
              if(error){
                const response = {
                  statusCode: 500,
                  body: error
                }
                callback(null, response);
                return;
              }
              const response = {
                statusCode: 200,
                body: JSON.stringify(data)
              };
              callback(null, response)
            });
          }
      FunctionName:
        Ref: LambdaGetProducts
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt IAMRole.Arn
    DependsOn:
      - DynamoDBTable
  #Create the the dynamoDB instance
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Dynamo-DB-Lambda-API
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
    DependsOn:
      - IAMRole
  #An IAM role is required to create Lambda, DynamoDB services
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy-API-Lambda-DB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
  #Creates a REST API
  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: API-Lambda-DB
    DependsOn:
      - LambdaPostFunction
      - LambdaGetFunction
  #Creates a resource in an API
  APIGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI
        - RootResourceId
      PathPart:
        Ref: LambdaPostProduct
    DependsOn:
      - APIGatewayRestAPI
  #Creates API Gateway methods that define the parameters and body that clients must send in their requests
  APIGatewayMethodPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizerId: !Ref ApiGatewayAuthorizer
      AuthorizationType: COGNITO_USER_POOLS
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: POST
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaPostFunction.Arn
    DependsOn:
      - APIGatewayResource
  APIGatewayMethodGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: GET
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaGetFunction.Arn
    DependsOn:
      - APIGatewayResource
  #Deploys an API Gateway RestApi resource to a stage so that clients can call the API over the internet. The stage acts as an environment.
  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayMethodPost
      - APIGatewayMethodGet
  #Grants an AWS service or another account permission to use a function. 
  #You can apply the policy at the function level, or specify a qualifier to restrict access to a single version or alias. 
  #If you use a qualifier, the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function.
  #2 Permissions are allowed since im implementing 2 API requests - GET/POST
  APIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaPostFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
  APIGatewayGetPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaGetFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
  #Creates an authorization layer that API Gateway activates for methods that have authorization enabled. 
  #API Gateway activates the authorizer when a client calls those methods.
  ApiGatewayAuthorizer:
      DependsOn:
        - APIGatewayRestAPI
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: APIGatewayRestAPI
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [UserPool, Arn]
  #Creates an Amazon Cognito user pool
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: user-pool-test
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: false
          Required: true
  #Specifies an Amazon Cognito user pool client
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: user-pool-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      AllowedOAuthFlows: 
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: 
        - phone
        - email
        - openid
        - profile
      CallbackURLs: 
        - http://localhost:3000/authenticated
      DefaultRedirectURI: http://localhost:3000/authenticated
      LogoutURLs:
        - http://localhost:3000/signedout
      SupportedIdentityProviders:
        - COGNITO
  #Creates a new domain for a user pool
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: userpooltestase
      UserPoolId: !Ref UserPool